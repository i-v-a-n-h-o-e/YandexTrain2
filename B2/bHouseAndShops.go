package main

import (
	"fmt"
)

/* STATEMENT
На Новом проспекте построили подряд 10 зданий. Каждое здание может быть либо жилым домом, либо магазином, либо офисным зданием.
Но оказалось, что жителям некоторых домов на Новом проспекте слишком далеко приходится идти до ближайшего магазина.
Для разработки плана развития общественного транспорта на Новом проспекте мэр города попросил вас выяснить,
какое же наибольшее расстояние приходится преодолевать жителям Нового проспекта, чтобы дойти от своего дома до ближайшего магазина.

INPUT
Программа получает на вход десять чисел, разделенных пробелами.
Каждое число задает тип здания на Новом проспекте: число 1 обозначает жилой дом, число 2 обозначает магазин,
число 0 обозначает офисное здание. Гарантируется, что на Новом проспекте есть хотя бы один жилой дом и хотя бы один магазин.

OUTPUT
Выведите одно целое число: наибольшее расстояние от дома до ближайшего к нему магазина.
Расстояние между двумя соседними домами считается равным 1 (то есть если два дома стоят рядом, то между ними расстояние 1,
если между двумя домами есть еще один дом, то расстояние между ними равно 2 и т.д.)
EXAMPLE
input
2 0 1 1 0 1 0 2 1 2
output
3
В примере из условия дальше всего идти до ближайшего магазина жителям четвертого дома:
ближайший к их дому магазин находится в первом доме, и им нужно пройти три дома до него.
Жителям других домов придется пройти меньшее расстояние до ближайшего магазина, поэтому ответ 3.
*/

func main() {
	var houses []int
	var shops []int
	var tmp, start, end, min, dist1, dist2 int
	for i := 0; i < 10; i++ {
		fmt.Scan(&tmp)

		if tmp == 1 {
			houses = append(houses, i)
		} else if tmp == 2 {
			shops = append(shops, i)
		}
	}
	max := -1

	for i := 0; i < len(houses); i++ {
		start = 0
		end = len(shops) - 1
		for (start != end) && ((start + 1) != end) && (shops[start] < houses[i]) && (shops[end] > houses[i]) {
			tmp = shops[(start+end)/2]
			if tmp < houses[i] {
				start = (start + end) / 2
			} else {
				end = (start + end) / 2
			}
		}

		if houses[i]-shops[start] > 0 {
			dist1 = houses[i] - shops[start]
		} else {
			dist1 = shops[start] - houses[i]
		}

		if shops[end]-houses[i] > 0 {
			dist2 = shops[end] - houses[i]
		} else {
			dist2 = houses[i] - shops[end]
		}

		if dist1 < dist2 {
			min = dist1
		} else {
			min = dist2
		}

		if min > max {
			max = min
		}
	}
	fmt.Print(max)
}
